{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","Cardlist","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_Cardlist","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","errorState","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c8961687.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js'\n\nconst Cardlist = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return ( \n            <Card \n              key={i} \n              id={robots[i].id} \n              name={robots[i].name} \n              email={robots[i].email} \n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div>\n    <input \n      className=\"\"\n      type=\"search\" \n      placeholder=\"search robots\" \n      onChange={searchChange}\n    />\n    </div>\n  );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      { props.children }\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState( {hasError: true });\n  }\n\n  render() {\n    if(this.state.hasError){\n      return <h1>Oops. That's not good.</h1>\n    } else{\n      return this.props.children;\n    }\n  }\n}\n\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState){\n      if(this.state.count !== nextState.count) {\n        return true;\n      } else{\n        return false;\n      }\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return {count: this.state.count + 1 }}\n    );\n  }\n\n  render() {\n    console.log('counter button');\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>Count: { this.state.count} </button>\n    );\n  }\n}\n\nexport default CounterButton;","import React, {Component } from 'react';\nimport CounterButton from '../components/CounterButton.js';\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <CounterButton color={'red'} />\n        <h1 className=\"f1\">RoboFriends</h1>  \n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary.js';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() { \n    this.props.onRequestRobots();\n  }\n\n  render(){\n    const { searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n      return isPending ?\n        <h1>Loading...</h1> :\n   (\n        <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <Cardlist robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n        </div>\n     )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);//connect is a higher order function (a function that returns another function)","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n   } from './constants.js';\n\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\n//higher order funciton\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })) \n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'; //first time we send request it will be pending\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n   } from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, errorState: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport thunkMiddleware from 'redux-thunk';\n\n//root reducer\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst logger = createLogger(); \nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}